// Generated by CoffeeScript 1.4.0
(function() {
  var crypto, exec, fs, key, request, sha, url, user;

  request = require('request');

  url = require('url');

  crypto = require('crypto');

  fs = require('fs');

  exec = require('child_process').exec;

  user = null;

  key = null;

  sha = function(str) {
    var sum;
    sum = crypto.createHash('sha1');
    sum.update(str);
    return sum.digest('base64');
  };

  exports.auth = function(myUser, pem) {
    user = myUser;
    return key = pem;
  };

  exports.request = function(uri, body, cb) {
    var canonicalRequest, hash, hashedPath, method, options, timestamp, _ref;
    if (cb == null) {
      _ref = [void 0, body], body = _ref[0], cb = _ref[1];
    }
    if (typeof uri === "object") {
      options = uri;
      uri = options.uri;
      if (options.method) {
        method = options.method;
      }
      if (options.body) {
        body = options.body;
      }
    }
    if (!method) {
      if (body) {
        method = "POST";
      } else {
        method = "GET";
      }
    }
    timestamp = new Date().toISOString().replace(/\....Z/, "Z");
    hashedPath = sha(url.parse(uri).pathname);
    hash = sha((body ? JSON.stringify(body) : ''));
    canonicalRequest = "Method:" + method + "\\nHashed Path:" + hashedPath + "\\nX-Ops-Content-Hash:" + hash + "\\nX-Ops-Timestamp:" + timestamp + "\\nX-Ops-UserId:" + user;
    return exec("printf '" + canonicalRequest + "' | openssl rsautl -sign -inkey " + key + " | openssl enc -base64", function(e, stdout) {
      var h, headers, i, signature, _i, _len, _ref1;
      signature = stdout.replace(/\s+/g, '');
      headers = {
        "Accept": "application/json",
        "X-Ops-Timestamp": timestamp,
        "X-Ops-UserId": user,
        "X-Ops-Content-Hash": hash,
        "X-Chef-Version": "0.10.4",
        "X-Ops-Sign": "version=1.0"
      };
      _ref1 = signature.match(/.{1,60}/g);
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        h = _ref1[i];
        headers["X-Ops-Authorization-" + (i + 1)] = h;
      }
      return request(uri, {
        method: method,
        json: body,
        headers: headers
      }, function(err, resp, body) {
        if (err) {
          return cb(err);
        } else {
          return cb(null, typeof body === 'string' ? JSON.parse(body) : body);
        }
      });
    });
  };

}).call(this);
